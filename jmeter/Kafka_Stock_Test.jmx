<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Kafka_Stock_Test" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables definidas por el Usuario" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Kafka Params" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="proto_kafka" elementType="Argument">
            <stringProp name="Argument.name">proto_kafka</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host_kafka" elementType="Argument">
            <stringProp name="Argument.name">host_kafka</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port_kafka" elementType="Argument">
            <stringProp name="Argument.name">port_kafka</stringProp>
            <stringProp name="Argument.value">8082</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="topic_kafka" elementType="Argument">
            <stringProp name="Argument.name">topic_kafka</stringProp>
            <stringProp name="Argument.value">STOCK</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delay" elementType="Argument">
            <stringProp name="Argument.name">delay</stringProp>
            <stringProp name="Argument.value">200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Elastic Params" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="index_elastic" elementType="Argument">
            <stringProp name="Argument.name">index_elastic</stringProp>
            <stringProp name="Argument.value">stock-%2A</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="host_elastic" elementType="Argument">
            <stringProp name="Argument.name">host_elastic</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port_elastic" elementType="Argument">
            <stringProp name="Argument.name">port_elastic</stringProp>
            <stringProp name="Argument.value">9200</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="proto_elastic" elementType="Argument">
            <stringProp name="Argument.name">proto_elastic</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delay_elastic_query" elementType="Argument">
            <stringProp name="Argument.name">delay_elastic_query</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Kafka API" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1556624701000</longProp>
        <longProp name="ThreadGroup.end_time">1556624701000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Msg Variable" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="msg_1" elementType="Argument">
              <stringProp name="Argument.name">msg_1</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221642, &quot;storeId&quot;: 1001, &quot;sku&quot;: 10000000001, &quot;rfidLocationId&quot;: 2, &quot;quantity&quot;: 1 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_2" elementType="Argument">
              <stringProp name="Argument.name">msg_2</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221643, &quot;storeId&quot;: 1001, &quot;sku&quot;: 10000000002, &quot;rfidLocationId&quot;: 2, &quot;quantity&quot;: 1 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_3" elementType="Argument">
              <stringProp name="Argument.name">msg_3</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221644, &quot;storeId&quot;: 2001, &quot;sku&quot;: 10000000003, &quot;rfidLocationId&quot;: 1, &quot;quantity&quot;: 1 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_4" elementType="Argument">
              <stringProp name="Argument.name">msg_4</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221645, &quot;storeId&quot;: 2001, &quot;sku&quot;: 10000000004, &quot;rfidLocationId&quot;: 1, &quot;quantity&quot;: 1 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_5" elementType="Argument">
              <stringProp name="Argument.name">msg_5</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221646, &quot;storeId&quot;: 3001, &quot;sku&quot;: 10000000005, &quot;rfidLocationId&quot;: 2, &quot;quantity&quot;: 1 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_6" elementType="Argument">
              <stringProp name="Argument.name">msg_6</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221647, &quot;storeId&quot;: 3001, &quot;sku&quot;: 10000000005, &quot;rfidLocationId&quot;: 2, &quot;quantity&quot;: 0 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_7" elementType="Argument">
              <stringProp name="Argument.name">msg_7</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221648, &quot;storeId&quot;: 3001, &quot;sku&quot;: 10000000005, &quot;rfidLocationId&quot;: 1, &quot;quantity&quot;: 1 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_8" elementType="Argument">
              <stringProp name="Argument.name">msg_8</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221649, &quot;storeId&quot;: 4001, &quot;sku&quot;: 10000000006, &quot;rfidLocationId&quot;: 2, &quot;quantity&quot;: 1 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_9" elementType="Argument">
              <stringProp name="Argument.name">msg_9</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221650, &quot;storeId&quot;: 4001, &quot;sku&quot;: 10000000006, &quot;rfidLocationId&quot;: 2, &quot;quantity&quot;: 2 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_10" elementType="Argument">
              <stringProp name="Argument.name">msg_10</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221651, &quot;storeId&quot;: 4001, &quot;sku&quot;: 10000000006, &quot;rfidLocationId&quot;: 2, &quot;quantity&quot;: 3 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_11" elementType="Argument">
              <stringProp name="Argument.name">msg_11</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221652, &quot;storeId&quot;: 4001, &quot;sku&quot;: 10000000006, &quot;rfidLocationId&quot;: 2, &quot;quantity&quot;: 4 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_12" elementType="Argument">
              <stringProp name="Argument.name">msg_12</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221653, &quot;storeId&quot;: 4001, &quot;sku&quot;: 10000000006, &quot;rfidLocationId&quot;: 2, &quot;quantity&quot;: 3 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="msg_13" elementType="Argument">
              <stringProp name="Argument.name">msg_13</stringProp>
              <stringProp name="Argument.value">{&quot;id&quot;:1557221654, &quot;storeId&quot;: 4001, &quot;sku&quot;: 10000000006, &quot;rfidLocationId&quot;: 1, &quot;quantity&quot;: 1 }</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Msg" enabled="true">
          <stringProp name="ForeachController.inputVal">msg</stringProp>
          <stringProp name="ForeachController.returnVal">msg</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
          <stringProp name="ForeachController.startIndex">0</stringProp>
          <stringProp name="ForeachController.endIndex">13</stringProp>
        </ForeachController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Kafka - Delay" enabled="true">
            <stringProp name="ConstantTimer.delay">${DELAY_KAFKA_MSG}</stringProp>
          </ConstantTimer>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Kafka - POST Stock" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;records&quot;: [&#xd;
        {&#xd;
        	&quot;key&quot;: &quot;Stock_test&quot;,&#xd;
          &quot;value&quot;: ${msg}&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${host_kafka}</stringProp>
            <stringProp name="HTTPSampler.port">${port_kafka}</stringProp>
            <stringProp name="HTTPSampler.protocol">${proto_kafka}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/topics/${topic_kafka}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/vnd.kafka.json.v2+json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value"> application/vnd.kafka.v2+json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Kafka Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Elastic API" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Controlador Bucle" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1538658424000</longProp>
        <longProp name="ThreadGroup.end_time">1538658424000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Elastic - Delay" enabled="true">
          <stringProp name="ConstantTimer.delay">${delay_elastic_query}</stringProp>
        </ConstantTimer>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Elastic - GET Stock" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;size&quot;:0,&#xd;
		&quot;aggs&quot;: {&#xd;
			&quot;sum_quantity&quot;:{&#xd;
			 &quot;sum&quot;:{&#xd;
				&quot;field&quot;:&quot;quantity&quot;&#xd;
			 }&#xd;
		}&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${host_elastic}</stringProp>
          <stringProp name="HTTPSampler.port">${port_elastic}</stringProp>
          <stringProp name="HTTPSampler.protocol">${proto_elastic}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${index_stock}/_search?pretty=</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - 200  OK" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Doc Value" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1017639845">&quot;value&quot; : 8</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Stock Value" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1300650008">&quot;value&quot; : 9.0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Elastic Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
